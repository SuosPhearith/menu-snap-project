generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id Int @id @default(autoincrement())

  title String @unique

  description String?

  body String

  published Boolean @default(false)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt
}

enum Role {
  admin
  user
  manager
  analyst
}

enum Gender {
  male
  female
  other
}

enum Sit {
  available
  unavailable
}

model User {
  id         String       @id @default(uuid())
  name       String
  phone      String       @unique
  password   String
  role       Role         @default(user)
  active     Boolean      @default(true)
  avatar     String?
  gender     Gender?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  Review     Review[]
  Restaurant Restaurant[]
}

model Restaurant {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  name        String
  logo        String?
  phoneOne    String
  phoneTwo    String?
  facebookUrl String?
  workingTime String
  sit         Sit        @default(available)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Slide       Slide[]
  Category    Category[]
  Food        Food[]
  userId      String
}

model Slide {
  id           String     @id @default(uuid())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  imageUrl     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Category {
  id           String     @id @default(uuid())
  restuarant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  name         String
  order        Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Food         Food[]
}

model Food {
  id            String     @id @default(uuid())
  restuarant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  category      Category   @relation(fields: [categoryId], references: [id])
  categoryId    String
  name          String
  averageRating Float
  smallPrice    Float?
  mediumPrice   Float?
  largePrice    Float?
  generalPrice  Float?
  detail        String
  image         String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Review        Review[]
}

model Review {
  id          String   @id @default(uuid())
  food        Food     @relation(fields: [foodId], references: [id])
  foodId      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  rating      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
